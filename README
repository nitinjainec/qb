Directory structure
  - include : contains header files.
  - src     : contains source code.
              TODO: Currently, methods are implemenented within header file.
                    Move them in their respective source (cpp) files under src.
  - data    : contains data file such as input file qb.csv
  - test    : contains test cases
    	      TODO: Currently it has basic test to check for end to end
	      	    functionality. Add unit test case for each class.

Files:
  - *.sh    : few scripts, comes handy to build and run sources and test cases.

Interfaces:
  All interfaces (abstract classes) are defined in include/interface.hpp

  - IReader        : reads the data. Can be extended to read data from file,
    	       	     database, network and etc.
		     It can also be extended to spawn multiple read threads.
  - IRecord        : defines record interface. Can be extended to represent
    		     quote,trade and signal.
  - IRecordFactory : defines templatized factory pattern. Extended to create
    		     Record object (quote, trade, quote) for std::string and
		     byte buffer.
  - IParser        : parses the data read by IReader and returns an object of
    		     type IRecord. It can be extended to parser different types
		     of data as csv, binary and etc.
  - IProcessor     : process the IRecord which is parsed by IParser. It then
    	       	     notifies the IWriter/s.
  - IWriter    	   : writes record on receiving notification from IProcessor.
    	             Can be extended to write data to file, database, network
		     and etc. It can be extended to spawn multiple writers.
  - IStat          : interface to record statistics of a function, thread or a
    	             process. It is orthogonal (independent) to above interface
		     and can be plugged to any member function or class object.
		     It can be extended to record memory, time stat and etc.

Utils:
  Utility function and libraries used within the project are defined under
  include/util directory.

  - ByteBuffer : byte buffer implemenation which shares data object and performs
       	 	 copy only on write.
  - Logger     : class to log data. Currently it has basic interface and was
    	       	 used only for debugging.
		 TODO: improve Logger
  - Datetime   : datetime class to store date upto milliseconds.
    	         TODO: currently date is stored in string format. Optimize it to
		       use std::chrono lib or std::time and milliseconds.

Implementation:

  - Simplicity is considered over efficiency. However, due to modular design
    efficiency can be easily achieved by plugging in new concrete class.
    For e.g. Processor is single threaded class, a threaded processor
    can be added which process the data in parallel. Same approach can be
    extended to IReader and IWriter class.

TODO:
  This section covers short comings of the project and future improvements

  - Serailization/De-serialization:
    Currently this is implemented within the record and is in-efficient. It
    needs to be re-factored into its own library under util. Also, current
    implemenation is buggy and looses double precision.

Questions:
  - Should output csv file be exact match of input csv?
    Currently, output csv is similar to input csv, however the ordering is
    different. If order needs to be maintained then IWriter class can be
    extended to write sequence number before writing the data.
    Similarly, IReader class will be extended to read sequence number and return
    data in correct sequence.

  - Statistics?
    It is not clear what all statistics needs to be captured. For completness
    only basic time and memory information is captured.
